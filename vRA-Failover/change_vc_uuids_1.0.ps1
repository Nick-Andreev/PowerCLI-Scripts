<#

.SYNOPSIS
Script updates VM Instance UUIDs to fix an issue with VMs going into
"Missing" state in vRA after failover to DR.

This script works in conjunction with another script 
export_vc_uuids_1.0.ps1, that exports the original VM Instance UUIDs
prior the failover.

.DESCRIPTION
VMware uses two UUIDs to identify VMs, BIOS UUID (uuid.bios in .vmx file)
derived from hardware VM is running on and Instance UUID (vc.uuid in .vmx 
file) generated by vCenter.

VM Instance UUIDs are changed when failing over vRA managed VMs to DR. 
This results in VMs changing state to "Missing". To restore VM Instance 
UUIDs, script uses two CSV files:
- List of the original VM Instance UUIDs exported using
export_vc_uuids_1.0.ps1 script.
- List of VMs in "Missing" state exported from vRA Infrastructure >
> Managed Machines page.

Refer to the "vRealize Automation Disaster Recovery" blog post at 
https://niktips.wordpress.com.

.PARAMETER VIServerName
VMware vCenter server host name or IP address

.PARAMETER VMUuidsCsv
List of the original VM Instance UUIDs exported using 
export_vc_uuids_1.0.ps1 script.

.PARAMETER MissingVmsCsv
List of VMs in "Missing" state exported from vRA Infrastructure >
> Managed Machines page.

.EXAMPLE
.\change_vc_uuids_1.0.ps1 -VIServerName vc01.acme.com -VMUuidsCsv vm_vc_uuids.csv -MissingVmsCsv Managed_Machines.csv

.NOTES
VMware PowerCLI is requred for script to run
   
.LINK
https://niktips.wordpress.com

#>

Param(
	[Parameter(Mandatory = $true)][string]$VIServerName,
	[Parameter(Mandatory = $true)][string]$VMUuidsCsv,
	[Parameter(Mandatory = $true)][string]$MissingVmsCsv
)

# vRA adds an extra line to CSV file, which has to be skipped.
$missing_vms = Get-Content -Path $MissingVmsCsv | Select-Object -Skip 1 | ConvertFrom-Csv
if(!$?) { exit }

$vm_uuids = import-csv $VMUuidsCsv
if(!$?) { exit }

Connect-ViServer $VIServerName | out-null
if(!$?) { exit }

foreach($vm in $missing_vms) {
	$vmName = $($vm.name)
	$vmUuid = $vm_uuids | where {$_.vm_name -eq $vmName} | % instance_uuid
	$vmStatus = $($vm.status)
	if($vmStatus -ne "Missing") {
		Write-Host "Virtual machine ""$vmName"" is not missing, skipping.."
	}
	else {
		$spec = New-Object VMware.Vim.VirtualMachineConfigSpec
		$spec.instanceUuid = $vmUuid
		$vm = Get-VM -Name $vmName
		$vm.Extensiondata.ReconfigVM_Task($spec) | out-null
		Write-Host "Changing ""$vmName"" instance UUID to ""$vmUuid"""
	}
}

Disconnect-VIServer -confirm:$false
